trigger:
  - 'feature-ms-eduardoAvello-mensaje'
pool:
  #vmImage: ubuntu-latest
  name: EduPc
steps:
  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'clean build jacocoTestReport'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      testRunTitle: 'Build and Generate JaCoCo report'
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      spotBugsAnalysis: true
    displayName: 'Build and generate JaCoCo report'

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $htmlReportPath = "$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/html/index.html"
        Write-Host "HTML report path: $htmlReportPath"  # Add this line to log the path
        $coverageDataXml = Get-Content -Path "$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/jacocoTestReport.xml" -Raw
        Write-Host "XML report : $coverageDataXml"
        $coverageData = Get-Content -Path "$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/html/index.html" -Raw
        # Realiza el análisis del archivo HTML para obtener los datos de cobertura necesarios
        # Puedes utilizar expresiones regulares o técnicas de manipulación de cadenas para extraer los datos específicos que necesitas
        $pattern = 'class="ctr2">(\d+)%<\/td>'
        $coverageLine = $coverageData | Select-String -Pattern $pattern | ForEach-Object { $_.Matches.Groups[1].Value }
        $coverage = [int]$coverageLine
      
        if ($coverage -lt 0) {
          Write-Host "Code coverage is below 85% ($coverage%). Failing the pipeline."
          exit 1
        } else {
          Write-Host "Code coverage is above 85% ($coverage%)."
        }
    displayName: 'Check code coverage JaCoCoReport'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/jacocoTestReport.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/html/'

  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'alushiro'
      projectKey: 'alushiro_microservicio-spring-v4'
      projectName: 'microservicio-spring-v4'
      extraProperties: |
        sonar.pullrequest.provider=none
        sonar.scm.disabled=true
        sonar.coverage.jacoco.xmlReportPaths=$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/jacocoTestReport.xml
        sonar.coverage.jacoco.minimumProjectThreshol=90  # Cambio del umbral de aceptación a 70%
    displayName: 'SonarCloud Prepare'
  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'clean build jacocoTestReport'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      testRunTitle: 'Build and Generate JaCoCo report'
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      spotBugsAnalysis: true
    displayName: 'Build and generate JaCoCo report'

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $htmlReportPath = "$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/html/index.html"
        Write-Host "HTML report path: $htmlReportPath"  # Add this line to log the path
        $coverageDataXml = Get-Content -Path "$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/jacocoTestReport.xml" -Raw
        Write-Host "XML report : $coverageDataXml"
        $coverageData = Get-Content -Path "$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/html/index.html" -Raw
        # Realiza el análisis del archivo HTML para obtener los datos de cobertura necesarios
        # Puedes utilizar expresiones regulares o técnicas de manipulación de cadenas para extraer los datos específicos que necesitas
        $pattern = 'class="ctr2">(\d+)%<\/td>'
        $coverageLine = $coverageData | Select-String -Pattern $pattern | ForEach-Object { $_.Matches.Groups[1].Value }
        $coverage = [int]$coverageLine
      
        if ($coverage -lt 0) {
          Write-Host "Code coverage is below 85% ($coverage%). Failing the pipeline."
          exit 1
        } else {
          Write-Host "Code coverage is above 85% ($coverage%)."
        }
    displayName: 'Check code coverage JaCoCoReport'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/jacocoTestReport.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/html/'

  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'alushiro'
      projectKey: 'alushiro_microservicio-spring-v4'
      projectName: 'microservicio-spring-v4'
      extraProperties: |
        sonar.pullrequest.provider=none
        sonar.scm.disabled=true
        sonar.coverage.jacoco.xmlReportPaths=$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/jacocoTestReport.xml
        sonar.coverage.jacoco.minimumProjectThreshol=90  # Cambio del umbral de aceptación a 70%

    displayName: 'SonarCloud Prepare'
    
  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'sonarqube'
      publishJUnitResults: true
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: true
      sqGradlePluginVersionChoice: 'specify'
      sonarQubeGradlePluginVersion: '3.5.0.2730'
      spotBugsAnalysis: false

  - task: Docker@2
    inputs:
      containerRegistry: 'Docker'
      command: 'login'
    
#  - task: Docker@2
#    inputs:
#      containerRegistry: 'Docker'
#      repository: 'alushiro/microservicio-spring-v4'
#      command: 'build'
#      Dockerfile: '**/Dockerfile'
#      tags: |
#        $(Build.BuildId)
#        latest

#  - task: Docker@2
#    inputs:
#      containerRegistry: 'Docker'
#      repository: 'alushiro/microservicio-spring-v4'
#      command: 'push'
#      tags: |
#        $(Build.BuildId)
#        latest
  - task: Docker@2
    inputs:
      containerRegistry: 'Docker'
      repository: 'alushiro/microservicio-spring-v4'
      command: 'buildAndPush'
      tags: |
            $(Build.BuildId)
            latest
      Dockerfile: '**/Dockerfile'
  - script: |   
      docker run --rm -dp 8080:8080 --name devops-microservicio-v4 alushiro/microservicio-spring-v4:latest
    displayName: 'Deploy Dockerized Service (microservicio)'
  - task: CmdLine@2
    inputs:
      script: 'jmeter -n -t $(System.DefaultWorkingDirectory)/jmeter/test-plan.jmx -l $(System.DefaultWorkingDirectory)/resultados.jtl' 
    displayName: 'Run JMeter'

  - script: |
      docker stop devops-microservicio-v4
    displayName: 'Stop Dockerized Service (microservicio)'