# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- 'feature-ms-eduardoAvello-mensaje'

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    ./gradlew clean build jacocoTestReport
    coverage=$(grep -E -o "total.*" build/reports/jacoco/test/jacocoTestReport.csv | awk -F ',' '{print $4}')
    if [ $(echo "$coverage > 85" | bc -l) -eq 1 ]; then
      echo "Code coverage is above 85% ($coverage)"
    else
      echo "Code coverage is below 85% ($coverage)"
      exit 1
    fi
  displayName: 'Build and validate code coverage'
- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'clean build jacocoTestReport'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    testRunTitle: 'Build and Generate JacocoReport'
    #codeCoverageToolOption: 'JaCoCo'
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: false
    spotBugsAnalysis: true

  displayName: Build and generate JaCoCo report
#- task: Gradle@3
#  inputs:
#    gradleWrapperFile: 'gradlew'
#    tasks: 'clean build jacocoTestReport'
#    publishJUnitResults: true
#    testResultsFiles: '**/TEST-*.xml'
#    testRunTitle: 'Build and Generate JacocoReport'
#    codeCoverageToolOption: 'JaCoCo'
#    codeCoverageClassFilesDirectories: 'build/classes/main/'
#    javaHomeOption: 'JDKVersion'
#    sonarQubeRunAnalysis: false
#    spotBugsAnalysis: true
#    codeCoverageGradle5xOrHigher: 5
#  displayName: Build and generate JaCoCo report

#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      $jacocoReport = Get-Content -Path 'build/reports/jacoco/test/html/index.html' -Raw
#      $coverageLine = $jacocoReport | Select-String -Pattern 'span class="ctr2">(?<coverage>[0-9]+)%<' | ForEach-Object { $_.Matches.Groups['coverage'].Value }
#      $coverage = [int]$coverageLine
#      if ($coverage -lt 85) {
#        Write-Host "Code coverage is below 85% ($coverage%). Failing the pipeline."
#        exit 1
#     } else {
#       Write-Host "Code coverage is above 85% ($coverage%)."
#      }
#  condition: always()
#  displayName: 'Check code coverage'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'alushiro'
    projectKey: 'alushiro_microservicio-spring-v4'
    projectName: 'microservicio-spring-v4'
  displayName: 'SonarCloud Prepare'
  
- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'sonarqube'
    publishJUnitResults: false
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: true
    sqGradlePluginVersionChoice: 'specify'
    sonarQubeGradlePluginVersion: '3.5.0.2730'
    spotBugsAnalysis: false
    


  

- task: Docker@2
  inputs:
    containerRegistry: 'Docker'
    command: 'login'
  
- task: Docker@2
  inputs:
    containerRegistry: 'Docker'
    repository: 'alushiro/microservicio-spring-v4'
    command: 'build'
    Dockerfile: '**/Dockerfile'

- task: Docker@2
  inputs:
    containerRegistry: 'Docker'
    repository: 'alushiro/microservicio-spring-v4'
    command: 'push'